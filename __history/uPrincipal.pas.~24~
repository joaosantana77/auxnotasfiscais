unit uPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, IdBaseComponent,
  IdComponent, IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase,
  IdMessageClient, IdPOP3, IdMessage, IdSSLOpenSSL, IdIOHandler,
  IdIOHandlerSocket, IdIOHandlerStack, IdSSL, Data.DB, Datasnap.DBClient,
  Vcl.Grids, Vcl.DBGrids, Vcl.ComCtrls, IdAttachmentFile;

type
  TF_Principal = class(TForm)
    POP3: TIdPOP3;
    Button1: TButton;
    Msg: TIdMessage;
    IO_OpenSSL: TIdSSLIOHandlerSocketOpenSSL;
    IdPOP31: TIdPOP3;
    DBGrid1: TDBGrid;
    StatusBar1: TStatusBar;
    DSMails: TDataSource;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    edHost: TEdit;
    edUserName: TEdit;
    edPassword: TEdit;
    edPort: TEdit;
    function FindAttachment(stFilename: string): integer;
    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  F_Principal: TF_Principal;

implementation

{$R *.dfm}

uses UDM;

procedure TF_Principal.Button1Click(Sender: TObject);
Var
  lMsg: TIdMessage;
  i, j: Integer;
  iMsgs, FMailBoxSize: Integer;
begin
  //Configurações
  //TIdPOP3
  with POP3 do begin
    IOHandler := IO_OpenSSL;
    AutoLogin := True;
    Host      := edhost.Text;
    Username  := edUsername.Text;
    UseTLS    := utUseImplicitTLS;
    Password  := edPassword.Text;
    Port      := StrToInt(edPort.Text);
{
    Host := 'pop.gmail.com';
    Username := 'joaomlm77@gmail.com';
    UseTLS := utUseImplicitTLS;
    Password := 'Arau1951SAJ';
    Port := 995; }

  end;

  //TIdSSLIOHandlerSocketOpenSSL
  with IO_OpenSSL do begin
    Destination := 'pop.gmail.com:995';
    Host := 'pop.gmail.com';
    Port := 995;
    SSLOptions.Method := sslvSSLv23;
    SSLOptions.Mode := sslmClient;
  end;

  //Conectando
  if not POP3.Connected then
    POP3.Connect;

  //testa a conexão
  if not POP3.Connected then
  Begin
    ShowMessage('Conexão não realizada!');
    Exit;
  End;

  //Pega a qtd de msg que há na caixa de entrada
  iMsgs := POP3.CheckMessages;
  FMailBoxSize := POP3.RetrieveMailBoxSize div 1024;

  Statusbar1.Panels[0].text := IntToStr(IMsgs);
  Statusbar1.Panels[1].text := format('Mail ocupa %dK no servidor', [FMailBoxSize]);
  StatusBar1.Refresh;

 { //Cria DataSet para armazenar os e-mails
  cdsMails.FieldDefs.Add('from',ftString,100);
  cdsMails.FieldDefs.Add('subject',ftString,100);
  cdsMails.FieldDefs.Add('body',ftMemo);
  cdsMails.CreateDataSet;
  }

  lMsg := TIdMessage.Create;

  //Recebe a mensagem
  //todo - Aqui tenho que descobrir como pegar varias mensagens de uma só vez,
  //ou fazer um loop para pegar uma a uma.
  //  POP3.Retrieve(1, lMsg);

  DSMails.DataSet.Open;
  //Preenchendo o DataSet
  for i := 1 to iMsgs do begin
    POP3.Retrieve(i,lMsg);
    DM.CDSMails.Insert;
    DM.CDSMails.FieldByName('IDMAIL').AsInteger   := i;
    DM.CDSMails.FieldByName('REMETENTE').AsString := lMsg.From.Name;
    DM.CDSMails.FieldByName('ASSUNTO').AsString   := lMsg.Subject;
//    DM.CDSMails.FieldByName('CORPO').AsString     := lMsg.Body.Text;
    DM.CDSMails.Post;

{    for j := 1 to lMsg.MessageParts.Count - 1 do
    begin
      if lMsg.MessageParts.Items[iMsgs] is TIdText then
      begin
        sTexto := TIdText(lMsg.MessageParts.Items[iMsgs]).Body.Text;
      end;
      POP3.Delete(iMsgs);
    end;
    if (lMsg.MessageParts.AttachmentCount > 0) then
    begin
      showmessage('ha anexos');
    end;
      if (parte is TIdAttachment) then begin
          anexo := parte as TIdAttachment;
          anexo.SaveToFile('c:\temp\' + anexo.FileName);
      end;
    end;
 }
    {    fname := FAttachPath + TIdAttachment(Msg.MessageParts.Items[intMSGIndex]).filename;
    SaveDialog1.FileName := fname;
    if SaveDialog1.Execute then
    begin
        Showbusy(true);
        TIdAttachment(Msg.MessageParts.Items[intMSGIndex]).SaveToFile(SaveDialog1.FileName);
        Showbusy(false);
    end;
 }


  end;

  lMsg.Free;
end;

function TF_Principal.FindAttachment(stFilename: string): integer;
var
   intIndex: Integer;
   found: boolean;
begin
   intIndex := -1;
   result := -1;
   if (Msg.MessageParts.Count < 1) then exit;
   found := false;
   stFilename := uppercase(stFilename);
   repeat
      inc(intIndex);
      if (Msg.MessageParts.Items[intIndex] is TIdAttachmentFile) then
         begin
            if stFilename = uppercase(TIdAttachmentFile(Msg.MessageParts.Items[intIndex]).Filename) then
               found := true;
         end;
   until found or (intIndex > Pred(Msg.MessageParts.Count));
   if found then
      result := intIndex
   else
      result := -1;
end; (* *)

procedure TF_Principal.FormShow(Sender: TObject);
begin
  DM.TblPerfil.Open;
  edhost.Text      := DM.TblPerfilHOST.AsString;
  edUsername.Text  := DM.TblPerfilUSERNAME.AsString;
  edPassword.Text  := DM.TblPerfilPASSWORD.AsString;
  edPort.Text      := IntToStr(DM.TblPerfilPORT.AsInteger);
  DM.TblPerfil.Close;
end; (*  *)

end.                                         ;

